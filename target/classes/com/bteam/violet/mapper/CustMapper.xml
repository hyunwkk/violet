<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="CustMapper">

	<!-- 회원가입 -->
	<insert id="register">
		INSERT INTO cust_tbl(
		cust_bno, cust_name, cust_gender, cust_birth,cust_email,
		cust_id, cust_password, cust_address, cust_phone, cust_different)
		VALUES (
		seq_cust.nextval,#{cust_name},#{cust_gender},#{cust_birth},#{cust_email},#{cust_id},#{cust_password},
		#{cust_address},#{cust_phone},#{cust_different})	
	</insert>
	
	<!-- 프로필 등록-->
	<update id="profile" parameterType="map">
		UPDATE cust_tbl
		SET cust_job=#{cust_job, jdbcType=VARCHAR}, cust_area=#{cust_area, jdbcType=VARCHAR}, cust_religion=#{cust_religion, jdbcType=VARCHAR}, 
		cust_smoking=#{cust_smoking, jdbcType=VARCHAR}, cust_drinking=#{cust_drinking, jdbcType=VARCHAR}, 
		cust_exer=#{cust_exer, jdbcType=VARCHAR}, cust_food=#{cust_food, jdbcType=VARCHAR}, 
		cust_pet=#{cust_pet, jdbcType=VARCHAR}, cust_study=#{cust_study, jdbcType=VARCHAR}, 
		cust_hobby=#{cust_hobby, jdbcType=VARCHAR}, cust_char=#{cust_char, jdbcType=VARCHAR}, cust_say=#{cust_say, jdbcType=VARCHAR}
		WHERE cust_id = #{cust_id, jdbcType=VARCHAR}
	</update>
	
	<!-- 프로필 보기 -->
	<select id="myProfile" resultType="com.bteam.violet.domain.CustVO">
		SELECT cust_id, cust_name, cust_job, cust_area, cust_religion, cust_smoking, cust_drinking, 
		cust_exer, cust_food, cust_pet, cust_study, cust_hobby, cust_char, cust_email, cust_say 
		FROM cust_tbl 
		WHERE cust_id = #{cust_id, jdbcType=VARCHAR}
	</select>
	
	
	<!-- 아이디 중복 체크 -->
	<select id="idChk" resultType="int">
		SELECT COUNT(*) FROM cust_tbl
		WHERE cust_id = #{cust_id}	
	</select>
	
	<!-- 패스워드 체크 -->
	<select id="passChk" resultType="int">
	SELECT COUNT(*) 
	FROM cust_tbl
	WHERE cust_id = #{cust_id, jdbcType=VARCHAR}
	AND cust_password = #{cust_password} 
	</select>


	 <!-- 로그인 -->
	<select id="login" parameterType="String" resultType="com.bteam.violet.domain.CustVO">
		SELECT *
		FROM cust_tbl
		WHERE cust_id = #{cust_id}

	</select>
	
	
	 <!-- 전체 회원정보 페이지 리스트-->
	 <!-- search는 반복적으로 사용하므로 재활용할 수 있게 include로 삽입! -->
	 <select id="info" resultType="com.bteam.violet.domain.CustVO" parameterType="com.bteam.violet.domain.Criteria">
	 	SELECT cust_bno, cust_id, cust_password, cust_name, cust_gender, cust_phone, cust_address,
				cust_joindate, cust_different
		FROM (select cust_bno, cust_id, cust_password, cust_name, cust_gender, cust_phone, cust_address,
				cust_joindate, cust_different, row_number() over(order by cust_bno ASC) as rNum from cust_tbl
				where 1=1
					<include refid="search"></include>)
		WHERE rNum BETWEEN #{rowStart} AND #{rowEnd}
		ORDER BY cust_bno ASC	 
	 </select>
	 
	 <select id="listCount" parameterType="com.bteam.violet.domain.SearchCriteria" resultType="int">
	 	SELECT COUNT(cust_bno)
	 	FROM cust_tbl
	 	WHERE 1=1
	 	<include refid="search"></include>
	 	AND cust_bno > 0
	 </select>
	 
	 <sql id="search">
		<if test="searchType != null">
			<if test="searchType == 't'.toString()">AND cust_id LIKE '%' || #{keyword} || '%'</if>
			<if test="searchType == 'c'.toString()">AND cust_name LIKE '%' || #{keyword} || '%'</if>
			<if test="searchType == 'w'.toString()">AND cust_phone LIKE '%' || #{keyword} || '%'</if>
		</if>
	</sql>
	
	
	<!-- 회원 존재 여부 -->
	<select id="isCust" parameterType="String" resultType="int">
		SELECT count(*) FROM cust_tbl
		WHERE cust_id=#{cust_id}
	</select>
	
	<!-- 관리자 회원탈퇴 -->
	<delete id="deletecust" parameterType="String">
		DELETE cust_tbl WHERE cust_id=#{cust_id}
	</delete>
	
	<!-- 회원정보 수정 -->
	<update id="custUpdate">
		UPDATE cust_tbl SET 
<!-- 		cust_password = #{cust_password}, -->
		cust_name = #{cust_name},
		cust_address = #{cust_address},
		cust_phone = #{cust_phone},
		cust_email = #{cust_email}
		WHERE cust_id=#{cust_id}
	</update>
	
	<!-- 회원탈퇴 -->
	<delete id="custDelete">
		DELETE FROM cust_tbl
		WHERE cust_id = #{cust_id}
<!-- 		  AND cust_password = #{cust_password}  -->
	</delete>
	 
	 <!-- 아이디찾기 -->
	<select id="custGetLoginId" parameterType="com.bteam.violet.domain.CustVO" resultType="String">
		SELECT cust_id FROM cust_tbl
		  WHERE cust_name = #{cust_name}
		  AND cust_email = #{cust_email}
	</select> 
	
   <!-- 비밀번호 변경 -->
   <update id="updatePassword">
   UPDATE cust_tbl 
   SET cust_password = #{new_password}
   WHERE cust_id = #{cust_id} 
   </update>

	
	 


</mapper>